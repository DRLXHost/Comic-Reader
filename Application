<!DOCTYPE html>
<html>
<head>
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
  <title>Immersive Comic Reader</title>
  <style>
    :root {
      --focus-opacity: 1;
      --unfocus-opacity: 0.4;
      --blur-strength: 4px;
    }
    
    body {
      margin: 0;
      padding: 0;
      overflow: hidden;
      background: #111;
      touch-action: pan-y;
      font-family: -apple-system, BlinkMacSystemFont, sans-serif;
    }
    
    #comic-viewport {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      overflow: hidden;
    }
    
    .comic-page {
      position: absolute;
      width: 100%;
      height: auto;
      transition: filter 0.6s ease, opacity 0.6s ease;
      will-change: filter, opacity;
    }
    
    #focus-overlay {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      pointer-events: none;
      background: radial-gradient(
        circle at center,
        rgba(0,0,0,0) 0%,
        rgba(0,0,0,0.7) 70%
      );
      mix-blend-mode: multiply;
      opacity: 0.8;
    }
    
    #controls {
      position: fixed;
      bottom: 20px;
      left: 0;
      right: 0;
      display: flex;
      justify-content: center;
      gap: 15px;
      z-index: 100;
    }
    
    .control-btn {
      width: 50px;
      height: 50px;
      border-radius: 50%;
      background: rgba(30,30,30,0.9);
      color: white;
      border: 2px solid rgba(255,255,255,0.3);
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 24px;
      cursor: pointer;
      user-select: none;
      backdrop-filter: blur(5px);
    }
    
    #progress {
      position: fixed;
      bottom: 85px;
      left: 50%;
      transform: translateX(-50%);
      background: rgba(0,0,0,0.7);
      color: white;
      padding: 5px 15px;
      border-radius: 20px;
      font-size: 14px;
      z-index: 100;
    }
    
    /* Eye-like focus effect */
    .focused {
      opacity: var(--focus-opacity) !important;
      filter: none !important;
      z-index: 2;
    }
    
    .unfocused {
      opacity: var(--unfocus-opacity);
      filter: blur(var(--blur-strength));
    }
    
    /* Mobile touch area */
    #touch-area {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      z-index: 10;
    }
  </style>
</head>
<body>
  <div id="comic-viewport">
    <img id="current-page" class="comic-page focused">
    <div id="focus-overlay"></div>
    <div id="touch-area"></div>
  </div>
  
  <div id="progress">1/5</div>
  
  <div id="controls">
    <div class="control-btn" id="prevBtn">←</div>
    <div class="control-btn" id="nextBtn">→</div>
  </div>

  <script src="https://cdn.jsdelivr.net/npm/hammerjs@2.0.8/hammer.min.js"></script>
  <script>
    // Comic data and state
    let comicData = {};
    let currentPage = 0;
    let currentPanel = 0;
    let touchStartX = 0;
    
    // DOM elements
    const comicViewport = document.getElementById('comic-viewport');
    const currentPageImg = document.getElementById('current-page');
    const prevBtn = document.getElementById('prevBtn');
    const nextBtn = document.getElementById('nextBtn');
    const progress = document.getElementById('progress');
    const touchArea = document.getElementById('touch-area');
    
    // Load comic data
    fetch('panels.json')
      .then(res => res.json())
      .then(data => {
        comicData = data;
        initReader();
      });
    
    function initReader() {
      loadPage(currentPage);
      setupSwipeGestures();
    }
    
    function loadPage(pageIndex) {
      const page = comicData.pages[pageIndex];
      currentPageImg.src = page.image;
      currentPageImg.onload = () => {
        showPanel(0); // Show first panel on load
      };
    }
    
    function showPanel(panelIndex) {
      const page = comicData.pages[currentPage];
      const panel = page.panels[panelIndex];
      currentPanel = panelIndex;
      
      // Update progress
      progress.textContent = `${currentPanel + 1}/${page.panels.length}`;
      
      // Calculate viewport transform
      const viewportWidth = comicViewport.clientWidth;
      const viewportHeight = comicViewport.clientHeight;
      
      // Center the panel in view
      const targetX = panel.x + panel.width/2 - viewportWidth/2;
      const targetY = panel.y + panel.height/2 - viewportHeight/2;
      
      // Apply smooth scroll to panel
      comicViewport.scrollTo({
        top: targetY,
        left: targetX,
        behavior: 'smooth'
      });
      
      // Apply visual focus effect
      applyFocusEffect(panel);
    }
    
    function applyFocusEffect(panel) {
      // Create a "spotlight" effect
      const focusOverlay = document.getElementById('focus-overlay');
      
      // Dynamic gradient centered on the panel
      focusOverlay.style.background = `
        radial-gradient(
          circle at ${panel.x + panel.width/2}px ${panel.y + panel.height/2}px,
          rgba(0,0,0,0) ${Math.min(panel.width, panel.height)/2}px,
          rgba(0,0,0,0.8) ${Math.max(panel.width, panel.height)*0.8}px
        )
      `;
    }
    
    function nextPanel() {
      const page = comicData.pages[currentPage];
      if (currentPanel < page.panels.length - 1) {
        showPanel(currentPanel + 1);
      } else if (currentPage < comicData.pages.length - 1) {
        currentPage++;
        loadPage(currentPage);
        showPanel(0);
      }
    }
    
    function prevPanel() {
      if (currentPanel > 0) {
        showPanel(currentPanel - 1);
      } else if (currentPage > 0) {
        currentPage--;
        loadPage(currentPage);
        showPanel(comicData.pages[currentPage].panels.length - 1);
      }
    }
    
    // Button controls
    nextBtn.addEventListener('click', nextPanel);
    prevBtn.addEventListener('click', prevPanel);
    
    // Keyboard controls
    document.addEventListener('keydown', (e) => {
      if (e.key === 'ArrowRight') nextPanel();
      if (e.key === 'ArrowLeft') prevPanel();
    });
    
    // Mobile swipe gestures with Hammer.js
    function setupSwipeGestures() {
      const hammer = new Hammer(touchArea);
      hammer.get('swipe').set({ direction: Hammer.DIRECTION_HORIZONTAL });
      
      hammer.on('swipeleft', () => nextPanel());
      hammer.on('swiperight', () => prevPanel());
      
      // Also support simple touch events for non-Hammer devices
      touchArea.addEventListener('touchstart', (e) => {
        touchStartX = e.touches[0].clientX;
      });
      
      touchArea.addEventListener('touchend', (e) => {
        const touchEndX = e.changedTouches[0].clientX;
        const diff = touchStartX - touchEndX;
        
        if (Math.abs(diff) > 50) { // Minimum swipe distance
          if (diff > 0) {
            nextPanel(); // Swiped left
          } else {
            prevPanel(); // Swiped right
          }
        }
      });
    }
    
    // Handle window resize
    window.addEventListener('resize', () => {
      showPanel(currentPanel);
    });
  </script>
</body>
</html>
